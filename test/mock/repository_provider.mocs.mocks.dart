// Mocks generated by Mockito 5.4.4 from annotations
// in repository_search/test/mock/repository_provider.mocs.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:repository_search/data/models/repository_model.dart' as _i3;
import 'package:repository_search/view/providers/repository_porivider.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [RepositoryProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepositoryProvider extends _i1.Mock
    implements _i2.RepositoryProvider {
  MockRepositoryProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.Repository> get repositories => (super.noSuchMethod(
        Invocation.getter(#repositories),
        returnValue: <_i3.Repository>[],
      ) as List<_i3.Repository>);

  @override
  bool get loading => (super.noSuchMethod(
        Invocation.getter(#loading),
        returnValue: false,
      ) as bool);

  @override
  set repositories(List<_i3.Repository>? repositories) => super.noSuchMethod(
        Invocation.setter(
          #repositories,
          repositories,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set loading(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #loading,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> search(String? query) => (super.noSuchMethod(
        Invocation.method(
          #search,
          [query],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
